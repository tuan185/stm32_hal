
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000934  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000adc  08000ae4  00010ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000adc  08000adc  00010ae4  2**0
                  CONTENTS
  4 .ARM          00000000  08000adc  08000adc  00010ae4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000adc  08000ae4  00010ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000adc  08000adc  00010adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae0  08000ae0  00010ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010ae4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010ae4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000010b3  00000000  00000000  00010b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000036f  00000000  00000000  00011bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00011f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e0  00000000  00000000  00012048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015f8  00000000  00000000  00012128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000140b  00000000  00000000  00013720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005b7f  00000000  00000000  00014b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001a6aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000390  00000000  00000000  0001a6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ac4 	.word	0x08000ac4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ac4 	.word	0x08000ac4

080001e8 <main>:
 * ALT mode = 5;
 */
void SPI1_Init();
void SPI1_GPIOInit();

int main(){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	uint8_t code = 0b010101;
 80001ee:	2315      	movs	r3, #21
 80001f0:	71fb      	strb	r3, [r7, #7]
	SPI1_GPIOInit();
 80001f2:	f000 f80f 	bl	8000214 <SPI1_GPIOInit>
	SPI1_Init();
 80001f6:	f000 f83f 	bl	8000278 <SPI1_Init>
	SPI_SSIControl(SPI1, ENABLE);
 80001fa:	2101      	movs	r1, #1
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <main+0x28>)
 80001fe:	f000 fbe7 	bl	80009d0 <SPI_SSIControl>
	SPI_SendData(SPI1, &code, 2);
 8000202:	1dfb      	adds	r3, r7, #7
 8000204:	2202      	movs	r2, #2
 8000206:	4619      	mov	r1, r3
 8000208:	4801      	ldr	r0, [pc, #4]	; (8000210 <main+0x28>)
 800020a:	f000 fbff 	bl	8000a0c <SPI_SendData>
	while(1);
 800020e:	e7fe      	b.n	800020e <main+0x26>
 8000210:	40013000 	.word	0x40013000

08000214 <SPI1_GPIOInit>:
	return 0;
}

void SPI1_GPIOInit(){
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIpins;
	SPIpins.pGPIOx = GPIOA;
 800021a:	4b16      	ldr	r3, [pc, #88]	; (8000274 <SPI1_GPIOInit+0x60>)
 800021c:	607b      	str	r3, [r7, #4]
	GPIO_PeriClockControl(GPIOA, ENABLE);
 800021e:	2101      	movs	r1, #1
 8000220:	4814      	ldr	r0, [pc, #80]	; (8000274 <SPI1_GPIOInit+0x60>)
 8000222:	f000 f875 	bl	8000310 <GPIO_PeriClockControl>
	SPIpins.GPIO_PinConfig.GPIO_pinMode = GPIO_MODE_ALTFN;
 8000226:	2302      	movs	r3, #2
 8000228:	727b      	strb	r3, [r7, #9]
	SPIpins.GPIO_PinConfig.GPIO_altFuncMode = 5;
 800022a:	2305      	movs	r3, #5
 800022c:	737b      	strb	r3, [r7, #13]
	SPIpins.GPIO_PinConfig.GPIO_pinPuPdControl = GPIO_NO_PUPD;
 800022e:	2300      	movs	r3, #0
 8000230:	72fb      	strb	r3, [r7, #11]
	SPIpins.GPIO_PinConfig.GPIO_pinOPType = GPIO_OP_PP;
 8000232:	2300      	movs	r3, #0
 8000234:	733b      	strb	r3, [r7, #12]
	SPIpins.GPIO_PinConfig.GPIO_pinSpeed = GPIO_SPEED_FAST;
 8000236:	2302      	movs	r3, #2
 8000238:	72bb      	strb	r3, [r7, #10]
	//SCLK
	SPIpins.GPIO_PinConfig.GPIO_pinNumber = 5;
 800023a:	2305      	movs	r3, #5
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f94f 	bl	80004e4 <GPIO_Init>
	//NSS
	SPIpins.GPIO_PinConfig.GPIO_pinNumber = 4;
 8000246:	2304      	movs	r3, #4
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f949 	bl	80004e4 <GPIO_Init>
	//MISO
	SPIpins.GPIO_PinConfig.GPIO_pinNumber = 6;
 8000252:	2306      	movs	r3, #6
 8000254:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f943 	bl	80004e4 <GPIO_Init>
	//MOSI
	SPIpins.GPIO_PinConfig.GPIO_pinNumber = 7;
 800025e:	2307      	movs	r3, #7
 8000260:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f93d 	bl	80004e4 <GPIO_Init>
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40020000 	.word	0x40020000

08000278 <SPI1_Init>:

void SPI1_Init(){
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1_config;
	SPI1_config.SPIx = SPI1;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <SPI1_Init+0x40>)
 8000280:	607b      	str	r3, [r7, #4]
	SPI1_config.SPI_Config.SPI_CPHA = SPI_CPHA_FIRST_EDGE;
 8000282:	2300      	movs	r3, #0
 8000284:	72fb      	strb	r3, [r7, #11]
	SPI1_config.SPI_Config.SPI_CPOL = SPI_CPOL_ZERO_IDLE;
 8000286:	2300      	movs	r3, #0
 8000288:	733b      	strb	r3, [r7, #12]
	SPI1_config.SPI_Config.SPI_DFF = SPI_DFF_8_BITS;
 800028a:	2300      	movs	r3, #0
 800028c:	72bb      	strb	r3, [r7, #10]
	SPI1_config.SPI_Config.SPI_SSM = SPI_SSM_DIS;
 800028e:	2301      	movs	r3, #1
 8000290:	737b      	strb	r3, [r7, #13]
	SPI1_config.SPI_Config.SPI_busConfig = SPI_BUSCONFIG_FULL_DUP;
 8000292:	2300      	movs	r3, #0
 8000294:	727b      	strb	r3, [r7, #9]
	SPI1_config.SPI_Config.SPI_deviceMode = SPI_MODE_MASTER;
 8000296:	2301      	movs	r3, #1
 8000298:	723b      	strb	r3, [r7, #8]
	SPI1_config.SPI_Config.SPI_speed = SPI_SPEED_DIV_2;
 800029a:	2300      	movs	r3, #0
 800029c:	73bb      	strb	r3, [r7, #14]
	SPI_PeriClockControl(SPI1, ENABLE);
 800029e:	2101      	movs	r1, #1
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <SPI1_Init+0x40>)
 80002a2:	f000 facf 	bl	8000844 <SPI_PeriClockControl>
	SPI_Init(&SPI1_config);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fb3b 	bl	8000924 <SPI_Init>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40013000 	.word	0x40013000

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 fbc7 	bl	8000a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff7b 	bl	80001e8 <main>

080002f2 <LoopForever>:

LoopForever:
  b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000300:	08000ae4 	.word	0x08000ae4
  ldr r2, =_sbss
 8000304:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000308:	2000001c 	.word	0x2000001c

0800030c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC_IRQHandler>
	...

08000310 <GPIO_PeriClockControl>:
 * @return				-
 *
 * @Note:				-
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enOrDi){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d162      	bne.n	80003e8 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a65      	ldr	r2, [pc, #404]	; (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800032a:	4b65      	ldr	r3, [pc, #404]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a64      	ldr	r2, [pc, #400]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		}else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}
}
 8000336:	e0bc      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOB){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a62      	ldr	r2, [pc, #392]	; (80004c4 <GPIO_PeriClockControl+0x1b4>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000340:	4b5f      	ldr	r3, [pc, #380]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a5e      	ldr	r2, [pc, #376]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e0b1      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOC){
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a5d      	ldr	r2, [pc, #372]	; (80004c8 <GPIO_PeriClockControl+0x1b8>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000356:	4b5a      	ldr	r3, [pc, #360]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a59      	ldr	r2, [pc, #356]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e0a6      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOD){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a59      	ldr	r2, [pc, #356]	; (80004cc <GPIO_PeriClockControl+0x1bc>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800036c:	4b54      	ldr	r3, [pc, #336]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a53      	ldr	r2, [pc, #332]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e09b      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOE){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a54      	ldr	r2, [pc, #336]	; (80004d0 <GPIO_PeriClockControl+0x1c0>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000382:	4b4f      	ldr	r3, [pc, #316]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a4e      	ldr	r2, [pc, #312]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000388:	f043 0310 	orr.w	r3, r3, #16
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e090      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOF){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a50      	ldr	r2, [pc, #320]	; (80004d4 <GPIO_PeriClockControl+0x1c4>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000398:	4b49      	ldr	r3, [pc, #292]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a48      	ldr	r2, [pc, #288]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e085      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOG){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a4b      	ldr	r2, [pc, #300]	; (80004d8 <GPIO_PeriClockControl+0x1c8>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ae:	4b44      	ldr	r3, [pc, #272]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a43      	ldr	r2, [pc, #268]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e07a      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOH){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a47      	ldr	r2, [pc, #284]	; (80004dc <GPIO_PeriClockControl+0x1cc>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003c4:	4b3e      	ldr	r3, [pc, #248]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a3d      	ldr	r2, [pc, #244]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e06f      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOI){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a42      	ldr	r2, [pc, #264]	; (80004e0 <GPIO_PeriClockControl+0x1d0>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d16b      	bne.n	80004b2 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 80003da:	4b39      	ldr	r3, [pc, #228]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a38      	ldr	r2, [pc, #224]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e064      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
	}else if(enOrDi == DISABLE){
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d161      	bne.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA){
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a32      	ldr	r2, [pc, #200]	; (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 80003f6:	4b32      	ldr	r3, [pc, #200]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a31      	ldr	r2, [pc, #196]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003fc:	f023 0301 	bic.w	r3, r3, #1
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e056      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOB){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a2f      	ldr	r2, [pc, #188]	; (80004c4 <GPIO_PeriClockControl+0x1b4>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 800040c:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a2b      	ldr	r2, [pc, #172]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000412:	f023 0302 	bic.w	r3, r3, #2
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	e04b      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOC){
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a2a      	ldr	r2, [pc, #168]	; (80004c8 <GPIO_PeriClockControl+0x1b8>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 8000422:	4b27      	ldr	r3, [pc, #156]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000426:	4a26      	ldr	r2, [pc, #152]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000428:	f023 0304 	bic.w	r3, r3, #4
 800042c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042e:	e040      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOD){
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a26      	ldr	r2, [pc, #152]	; (80004cc <GPIO_PeriClockControl+0x1bc>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000438:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a20      	ldr	r2, [pc, #128]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800043e:	f023 0308 	bic.w	r3, r3, #8
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	e035      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOE){
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <GPIO_PeriClockControl+0x1c0>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000454:	f023 0310 	bic.w	r3, r3, #16
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045a:	e02a      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOF){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <GPIO_PeriClockControl+0x1c4>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a15      	ldr	r2, [pc, #84]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800046a:	f023 0320 	bic.w	r3, r3, #32
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000470:	e01f      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOG){
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a18      	ldr	r2, [pc, #96]	; (80004d8 <GPIO_PeriClockControl+0x1c8>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000486:	e014      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOH){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <GPIO_PeriClockControl+0x1cc>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049c:	e009      	b.n	80004b2 <GPIO_PeriClockControl+0x1a2>
		}else if(pGPIOx == GPIOI){
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a0f      	ldr	r2, [pc, #60]	; (80004e0 <GPIO_PeriClockControl+0x1d0>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d105      	bne.n	80004b2 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80004ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40020400 	.word	0x40020400
 80004c8:	40020800 	.word	0x40020800
 80004cc:	40020c00 	.word	0x40020c00
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40021400 	.word	0x40021400
 80004d8:	40021800 	.word	0x40021800
 80004dc:	40021c00 	.word	0x40021c00
 80004e0:	40022000 	.word	0x40022000

080004e4 <GPIO_Init>:
 * @return				-
 *
 * @Note:				-
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp register
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
	//1.configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_pinMode <= GPIO_MODE_ANALOG){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d820      	bhi.n	800053a <GPIO_Init+0x56>
		//non interrupt mode
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_pinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6819      	ldr	r1, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	e0b9      	b.n	80006ae <GPIO_Init+0x1ca>
	}else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_pinMode == GPIO_MODE_IT_RT){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	795b      	ldrb	r3, [r3, #5]
 800053e:	2b05      	cmp	r3, #5
 8000540:	d117      	bne.n	8000572 <GPIO_Init+0x8e>
			//1. configure the RTSR & FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 8000542:	4b3f      	ldr	r3, [pc, #252]	; (8000640 <GPIO_Init+0x15c>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	4611      	mov	r1, r2
 8000552:	4a3b      	ldr	r2, [pc, #236]	; (8000640 <GPIO_Init+0x15c>)
 8000554:	430b      	orrs	r3, r1
 8000556:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 8000558:	4b39      	ldr	r3, [pc, #228]	; (8000640 <GPIO_Init+0x15c>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	43d2      	mvns	r2, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a35      	ldr	r2, [pc, #212]	; (8000640 <GPIO_Init+0x15c>)
 800056c:	400b      	ands	r3, r1
 800056e:	60d3      	str	r3, [r2, #12]
 8000570:	e035      	b.n	80005de <GPIO_Init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_pinMode == GPIO_MODE_IT_FT){
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	795b      	ldrb	r3, [r3, #5]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d117      	bne.n	80005aa <GPIO_Init+0xc6>
			//1. configure the RTSR & FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 800057a:	4b31      	ldr	r3, [pc, #196]	; (8000640 <GPIO_Init+0x15c>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	7912      	ldrb	r2, [r2, #4]
 8000582:	4611      	mov	r1, r2
 8000584:	2201      	movs	r2, #1
 8000586:	408a      	lsls	r2, r1
 8000588:	4611      	mov	r1, r2
 800058a:	4a2d      	ldr	r2, [pc, #180]	; (8000640 <GPIO_Init+0x15c>)
 800058c:	430b      	orrs	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 8000590:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <GPIO_Init+0x15c>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	43d2      	mvns	r2, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a27      	ldr	r2, [pc, #156]	; (8000640 <GPIO_Init+0x15c>)
 80005a4:	400b      	ands	r3, r1
 80005a6:	6093      	str	r3, [r2, #8]
 80005a8:	e019      	b.n	80005de <GPIO_Init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_pinMode == GPIO_MODE_IT_FRT){
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	795b      	ldrb	r3, [r3, #5]
 80005ae:	2b06      	cmp	r3, #6
 80005b0:	d115      	bne.n	80005de <GPIO_Init+0xfa>
			//1. configure the RTSR & FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <GPIO_Init+0x15c>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a1f      	ldr	r2, [pc, #124]	; (8000640 <GPIO_Init+0x15c>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <GPIO_Init+0x15c>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a19      	ldr	r2, [pc, #100]	; (8000640 <GPIO_Init+0x15c>)
 80005da:	430b      	orrs	r3, r1
 80005dc:	60d3      	str	r3, [r2, #12]
		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <GPIO_Init+0x160>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	4a18      	ldr	r2, [pc, #96]	; (8000644 <GPIO_Init+0x160>)
 80005e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e8:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <GPIO_Init+0x164>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d035      	beq.n	8000660 <GPIO_Init+0x17c>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <GPIO_Init+0x168>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d01d      	beq.n	800063a <GPIO_Init+0x156>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <GPIO_Init+0x16c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d016      	beq.n	8000636 <GPIO_Init+0x152>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a11      	ldr	r2, [pc, #68]	; (8000654 <GPIO_Init+0x170>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d00f      	beq.n	8000632 <GPIO_Init+0x14e>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <GPIO_Init+0x174>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d008      	beq.n	800062e <GPIO_Init+0x14a>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <GPIO_Init+0x178>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d101      	bne.n	800062a <GPIO_Init+0x146>
 8000626:	2305      	movs	r3, #5
 8000628:	e01b      	b.n	8000662 <GPIO_Init+0x17e>
 800062a:	2300      	movs	r3, #0
 800062c:	e019      	b.n	8000662 <GPIO_Init+0x17e>
 800062e:	2304      	movs	r3, #4
 8000630:	e017      	b.n	8000662 <GPIO_Init+0x17e>
 8000632:	2303      	movs	r3, #3
 8000634:	e015      	b.n	8000662 <GPIO_Init+0x17e>
 8000636:	2302      	movs	r3, #2
 8000638:	e013      	b.n	8000662 <GPIO_Init+0x17e>
 800063a:	2301      	movs	r3, #1
 800063c:	e011      	b.n	8000662 <GPIO_Init+0x17e>
 800063e:	bf00      	nop
 8000640:	40013c00 	.word	0x40013c00
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000
 800064c:	40020400 	.word	0x40020400
 8000650:	40020800 	.word	0x40020800
 8000654:	40020c00 	.word	0x40020c00
 8000658:	40021000 	.word	0x40021000
 800065c:	40021400 	.word	0x40021400
 8000660:	2300      	movs	r3, #0
 8000662:	72fb      	strb	r3, [r7, #11]
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber/4;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	72bb      	strb	r3, [r7, #10]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber%4;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	f003 0303 	and.w	r3, r3, #3
 8000674:	727b      	strb	r3, [r7, #9]
		SYSCFG->EXTICR[temp1] |= code << (4 * temp2);
 8000676:	4a67      	ldr	r2, [pc, #412]	; (8000814 <GPIO_Init+0x330>)
 8000678:	7abb      	ldrb	r3, [r7, #10]
 800067a:	3302      	adds	r3, #2
 800067c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000680:	7af9      	ldrb	r1, [r7, #11]
 8000682:	7a7b      	ldrb	r3, [r7, #9]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	4618      	mov	r0, r3
 800068c:	4961      	ldr	r1, [pc, #388]	; (8000814 <GPIO_Init+0x330>)
 800068e:	7abb      	ldrb	r3, [r7, #10]
 8000690:	4302      	orrs	r2, r0
 8000692:	3302      	adds	r3, #2
 8000694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. enable EXTI delivery
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 8000698:	4b5f      	ldr	r3, [pc, #380]	; (8000818 <GPIO_Init+0x334>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	7912      	ldrb	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	408a      	lsls	r2, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a5b      	ldr	r2, [pc, #364]	; (8000818 <GPIO_Init+0x334>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6013      	str	r3, [r2, #0]


	}
	//2.configure the speed
	temp = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_pinSpeed <= GPIO_SPEED_HIGH){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	799b      	ldrb	r3, [r3, #6]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d81f      	bhi.n	80006fa <GPIO_Init+0x216>
		//non interrupt mode
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_pinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber));
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	2103      	movs	r1, #3
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	4619      	mov	r1, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	400a      	ands	r2, r1
 80006e8:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6899      	ldr	r1, [r3, #8]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	609a      	str	r2, [r3, #8]
	}
	//3.configure the pull-up/pull-down
	temp = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_pinPuPdControl <= GPIO_PD){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	79db      	ldrb	r3, [r3, #7]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d81f      	bhi.n	8000746 <GPIO_Init+0x262>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_pinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	79db      	ldrb	r3, [r3, #7]
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	2103      	movs	r1, #3
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43db      	mvns	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	400a      	ands	r2, r1
 8000734:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	68d9      	ldr	r1, [r3, #12]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	430a      	orrs	r2, r1
 8000744:	60da      	str	r2, [r3, #12]
	}
	//4.configure the output type
	temp = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_pinOPType <= GPIO_OP_OD){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7a1b      	ldrb	r3, [r3, #8]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d81d      	bhi.n	800078e <GPIO_Init+0x2aa>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_pinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7a1b      	ldrb	r3, [r3, #8]
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->OTYER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	2301      	movs	r3, #1
 8000770:	408b      	lsls	r3, r1
 8000772:	43db      	mvns	r3, r3
 8000774:	4619      	mov	r1, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	400a      	ands	r2, r1
 800077c:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYER |= temp;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6859      	ldr	r1, [r3, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	430a      	orrs	r2, r1
 800078c:	605a      	str	r2, [r3, #4]
	}
	//5.configure the alternative functionality
	temp = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_altFuncMode <= 15){
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	7a5b      	ldrb	r3, [r3, #9]
 8000796:	2b0f      	cmp	r3, #15
 8000798:	d836      	bhi.n	8000808 <GPIO_Init+0x324>
		uint8_t pin = pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	723b      	strb	r3, [r7, #8]
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_altFuncMode << (4 * (pin%8));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7a5b      	ldrb	r3, [r3, #9]
 80007a4:	461a      	mov	r2, r3
 80007a6:	7a3b      	ldrb	r3, [r7, #8]
 80007a8:	f003 0307 	and.w	r3, r3, #7
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFR[pin/8] &= ~(0xF << (4 * pin%8));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7a3a      	ldrb	r2, [r7, #8]
 80007ba:	08d2      	lsrs	r2, r2, #3
 80007bc:	b2d0      	uxtb	r0, r2
 80007be:	4602      	mov	r2, r0
 80007c0:	3208      	adds	r2, #8
 80007c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007c6:	7a3b      	ldrb	r3, [r7, #8]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	210f      	movs	r1, #15
 80007d0:	fa01 f303 	lsl.w	r3, r1, r3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4011      	ands	r1, r2
 80007de:	f100 0208 	add.w	r2, r0, #8
 80007e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[pin/8] |= temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	7a3a      	ldrb	r2, [r7, #8]
 80007ec:	08d2      	lsrs	r2, r2, #3
 80007ee:	b2d0      	uxtb	r0, r2
 80007f0:	4602      	mov	r2, r0
 80007f2:	3208      	adds	r2, #8
 80007f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4311      	orrs	r1, r2
 8000800:	f100 0208 	add.w	r2, r0, #8
 8000804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
};
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40013800 	.word	0x40013800
 8000818:	40013c00 	.word	0x40013c00

0800081c <SPI_GetStatusFlag>:
#define SPI_BSY_FLAG		( 1 << 7 )
#define SPI_OVR_FLAG		( 1 << 6 )
#define SPI_MODDF_FLAG		( 1 << 5 )
#define SPI_TXE_FLAG		( 1 << 1 )
#define SPI_RXNE_FLAG		( 1 << 0 )
uint8_t SPI_GetStatusFlag(SPI_RegDef_t* SPIx, uint32_t flagName){
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
	if(SPIx->SPI_SR & flagName) return FLAG_ENABLE;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	4013      	ands	r3, r2
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SPI_GetStatusFlag+0x1a>
 8000832:	2301      	movs	r3, #1
 8000834:	e000      	b.n	8000838 <SPI_GetStatusFlag+0x1c>
	return FLAG_DISABLE;
 8000836:	2300      	movs	r3, #0
};
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
	...

08000844 <SPI_PeriClockControl>:
 * @return				-
 *
 * @Note:				-
 *
 */
void SPI_PeriClockControl(SPI_RegDef_t* SPIx, uint8_t EnOrDi){
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d12b      	bne.n	80008ae <SPI_PeriClockControl+0x6a>
		if(SPIx == SPI1){
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <SPI_PeriClockControl+0xcc>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <SPI_PeriClockControl+0xd0>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a2c      	ldr	r2, [pc, #176]	; (8000914 <SPI_PeriClockControl+0xd0>)
 8000864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
			SPI3_PCLK_DI();
		}else if(SPIx == SPI4){
			SPI4_PCLK_DI();
		}
	}
};
 800086a:	e04b      	b.n	8000904 <SPI_PeriClockControl+0xc0>
		}else if(SPIx == SPI2){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <SPI_PeriClockControl+0xd4>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d106      	bne.n	8000882 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <SPI_PeriClockControl+0xd0>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a26      	ldr	r2, [pc, #152]	; (8000914 <SPI_PeriClockControl+0xd0>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
};
 8000880:	e040      	b.n	8000904 <SPI_PeriClockControl+0xc0>
		}else if(SPIx == SPI3){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a25      	ldr	r2, [pc, #148]	; (800091c <SPI_PeriClockControl+0xd8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <SPI_PeriClockControl+0xd0>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a21      	ldr	r2, [pc, #132]	; (8000914 <SPI_PeriClockControl+0xd0>)
 8000890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
};
 8000896:	e035      	b.n	8000904 <SPI_PeriClockControl+0xc0>
		}else if(SPIx == SPI4){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a21      	ldr	r2, [pc, #132]	; (8000920 <SPI_PeriClockControl+0xdc>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d131      	bne.n	8000904 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008aa:	6453      	str	r3, [r2, #68]	; 0x44
};
 80008ac:	e02a      	b.n	8000904 <SPI_PeriClockControl+0xc0>
		if(SPIx == SPI1){
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <SPI_PeriClockControl+0xcc>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d106      	bne.n	80008c4 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008c0:	6453      	str	r3, [r2, #68]	; 0x44
};
 80008c2:	e01f      	b.n	8000904 <SPI_PeriClockControl+0xc0>
		}else if(SPIx == SPI2){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <SPI_PeriClockControl+0xd4>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d106      	bne.n	80008da <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a10      	ldr	r2, [pc, #64]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
};
 80008d8:	e014      	b.n	8000904 <SPI_PeriClockControl+0xc0>
		}else if(SPIx == SPI3){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a0f      	ldr	r2, [pc, #60]	; (800091c <SPI_PeriClockControl+0xd8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d106      	bne.n	80008f0 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
};
 80008ee:	e009      	b.n	8000904 <SPI_PeriClockControl+0xc0>
		}else if(SPIx == SPI4){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <SPI_PeriClockControl+0xdc>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d105      	bne.n	8000904 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <SPI_PeriClockControl+0xd0>)
 80008fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000902:	6453      	str	r3, [r2, #68]	; 0x44
};
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40013000 	.word	0x40013000
 8000914:	40023800 	.word	0x40023800
 8000918:	40003800 	.word	0x40003800
 800091c:	40003c00 	.word	0x40003c00
 8000920:	40013400 	.word	0x40013400

08000924 <SPI_Init>:
 * @return				-
 *
 * @Note:				-
 *
 */
void SPI_Init(SPI_Handle_t* SPI_Handle){
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
	//1. Configure the mode of device
	tempreg |= (SPI_Handle->SPI_Config.SPI_deviceMode << 2);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4313      	orrs	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
	//2. Configure the bus
	if(SPI_Handle->SPI_Config.SPI_busConfig == SPI_BUSCONFIG_HALF_DUP){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	795b      	ldrb	r3, [r3, #5]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d104      	bne.n	8000950 <SPI_Init+0x2c>
		tempreg |= (1 << 15);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e014      	b.n	800097a <SPI_Init+0x56>
	}else if(SPI_Handle->SPI_Config.SPI_busConfig == SPI_BUSCONFIG_FULL_DUP){
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	795b      	ldrb	r3, [r3, #5]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d104      	bne.n	8000962 <SPI_Init+0x3e>
		tempreg &= ~(1 << 15);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e00b      	b.n	800097a <SPI_Init+0x56>
	}else if(SPI_Handle->SPI_Config.SPI_busConfig == SPI_BUSCONFIG_SIMPLEX_RXONLY){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	795b      	ldrb	r3, [r3, #5]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d107      	bne.n	800097a <SPI_Init+0x56>
		tempreg |= (1 << 15);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000970:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << 10);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000978:	60fb      	str	r3, [r7, #12]
	}
	//3. Set the value of data frame format
	tempreg |= (SPI_Handle->SPI_Config.SPI_DFF << 11);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	799b      	ldrb	r3, [r3, #6]
 800097e:	02db      	lsls	r3, r3, #11
 8000980:	461a      	mov	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
	//4. Set the divider for baud rate clock
	tempreg |= (SPI_Handle->SPI_Config.SPI_speed << 3);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7a9b      	ldrb	r3, [r3, #10]
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4313      	orrs	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
	//5. Set the clock phase
	tempreg |= (SPI_Handle->SPI_Config.SPI_CPHA << 0);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	79db      	ldrb	r3, [r3, #7]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
	//6. Set the clock polarity
	tempreg |= (SPI_Handle->SPI_Config.SPI_CPOL << 1);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7a1b      	ldrb	r3, [r3, #8]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
	//7. Enable/disable software selection management
	tempreg |= (SPI_Handle->SPI_Config.SPI_SSM << 9);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7a5b      	ldrb	r3, [r3, #9]
 80009b4:	025b      	lsls	r3, r3, #9
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
	SPI_Handle->SPIx->SPI_CR1 = tempreg;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	601a      	str	r2, [r3, #0]
};
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <SPI_SSIControl>:
	}else if(SPIx == SPI4){
		SPI4_REG_RESET();
	}
};

void SPI_SSIControl(SPI_RegDef_t* SPIx, uint8_t EnOrDi){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) SPIx->SPI_CR1 |= (1 << 8);
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d106      	bne.n	80009f0 <SPI_SSIControl+0x20>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
	else if(EnOrDi == DISABLE) SPIx->SPI_CR1 &= ~(1 << 8);
}
 80009ee:	e008      	b.n	8000a02 <SPI_SSIControl+0x32>
	else if(EnOrDi == DISABLE) SPIx->SPI_CR1 &= ~(1 << 8);
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d105      	bne.n	8000a02 <SPI_SSIControl+0x32>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <SPI_SendData>:
 * @return				-
 *
 * @Note:				-
 *
 */
void SPI_SendData(SPI_RegDef_t* SPIx,uint8_t* pTxBuffer, uint32_t length){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	while(length != 0){
 8000a18:	e027      	b.n	8000a6a <SPI_SendData+0x5e>
		while( SPI_GetStatusFlag(SPIx, SPI_TXE_FLAG) == FLAG_DISABLE );
 8000a1a:	bf00      	nop
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff fefc 	bl	800081c <SPI_GetStatusFlag>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f8      	beq.n	8000a1c <SPI_SendData+0x10>
		if( SPIx->SPI_CR1 & ( 1 << 11 ) ){
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00e      	beq.n	8000a54 <SPI_SendData+0x48>
			SPIx->SPI_DR = *((uint16_t*)pTxBuffer);
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	60da      	str	r2, [r3, #12]
			length--;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
			length--;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	e00a      	b.n	8000a6a <SPI_SendData+0x5e>
		}else{
			SPIx->SPI_DR = *(pTxBuffer);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	60da      	str	r2, [r3, #12]
			length--;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3301      	adds	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
	while(length != 0){
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1d4      	bne.n	8000a1a <SPI_SendData+0xe>
		}
	}
};
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <__libc_init_array>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	4d0d      	ldr	r5, [pc, #52]	; (8000ab4 <__libc_init_array+0x38>)
 8000a80:	4c0d      	ldr	r4, [pc, #52]	; (8000ab8 <__libc_init_array+0x3c>)
 8000a82:	1b64      	subs	r4, r4, r5
 8000a84:	10a4      	asrs	r4, r4, #2
 8000a86:	2600      	movs	r6, #0
 8000a88:	42a6      	cmp	r6, r4
 8000a8a:	d109      	bne.n	8000aa0 <__libc_init_array+0x24>
 8000a8c:	4d0b      	ldr	r5, [pc, #44]	; (8000abc <__libc_init_array+0x40>)
 8000a8e:	4c0c      	ldr	r4, [pc, #48]	; (8000ac0 <__libc_init_array+0x44>)
 8000a90:	f000 f818 	bl	8000ac4 <_init>
 8000a94:	1b64      	subs	r4, r4, r5
 8000a96:	10a4      	asrs	r4, r4, #2
 8000a98:	2600      	movs	r6, #0
 8000a9a:	42a6      	cmp	r6, r4
 8000a9c:	d105      	bne.n	8000aaa <__libc_init_array+0x2e>
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa4:	4798      	blx	r3
 8000aa6:	3601      	adds	r6, #1
 8000aa8:	e7ee      	b.n	8000a88 <__libc_init_array+0xc>
 8000aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aae:	4798      	blx	r3
 8000ab0:	3601      	adds	r6, #1
 8000ab2:	e7f2      	b.n	8000a9a <__libc_init_array+0x1e>
 8000ab4:	08000adc 	.word	0x08000adc
 8000ab8:	08000adc 	.word	0x08000adc
 8000abc:	08000adc 	.word	0x08000adc
 8000ac0:	08000ae0 	.word	0x08000ae0

08000ac4 <_init>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	bf00      	nop
 8000ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aca:	bc08      	pop	{r3}
 8000acc:	469e      	mov	lr, r3
 8000ace:	4770      	bx	lr

08000ad0 <_fini>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	bf00      	nop
 8000ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad6:	bc08      	pop	{r3}
 8000ad8:	469e      	mov	lr, r3
 8000ada:	4770      	bx	lr
